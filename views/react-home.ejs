<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Homepage</title>
    <link rel="stylesheet" href="./css/styles.css">

    <!-- React Libraries -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
       
    const Movies = (props) => {
        // props is an array
        //console.log(props)
        const listItems = props.data.map((item) =>
        <li key={item._id} id={item._id} onClick={props.clickHandler}>
            {item.title}
        </li>);
        return <ul>{listItems}</ul>
    }

    const showDetail = (event) => {
        console.log(event.target)
        console.log(event.target.innerText)
        console.log(event.target.id)
        window.location.href = "/details/" + event.target.innerText;
    }

    const MovieDetail = (props) => {
        return (
        <div className="movie_details">    
            <h2>Movie details:</h2> 
            <form>
            <label>Title: </label><input type="text" name="title" value={props.item.title || ""} onChange={props.handleChange}></input>
            <label>Director: </label><input type="text" name="director" value={props.item.director || ""} onChange={props.handleChange}></input>
            <label>Year Released: </label><input type="number" name="yearReleased" value={props.item.yearReleased || ""} onChange={props.handleChange}></input>
            <label>Budget: </label><input type="text" name="budget" value={props.item.budget || ""} onChange={props.handleChange}></input>
            <label>Box-office: </label><input type="text" name="boxOffice" value={props.item.boxOffice || ""} onChange={props.handleChange}></input>
            </form>
            <div className="buttons">
            <button id="save_movie" name="save" onClick={props.saveItem}>Save</button>
            <button id="clear_form" name="clear" onClick={props.clearForm}>Clear</button>
            <button id="delete_movie" name="delete" onClick={props.deleteItem}>Delete</button>
            </div>
        </div>
        )
    }


        const App = (props) => {
            const [items, setItems] = React.useState([]);
            const [currentItem, setCurrentItem] = React.useState({});
            //console.log(items)
            // load data after component has rendered
            React.useEffect(() => {
                const fetchData = async () => {
                    fetch("/api/v1/movies").then(res => res.json())
                    .then((json) => {
                    setItems(json);
                    })
                }
                fetchData()
             }, []);

            // list click event handler 
            const selectItem = (event) => {
                console.log(event.target);
                const found = items.find((item) => {
                    return item._id === event.target.id;
             });
                setCurrentItem(found);
            }
            // clear form
            const clearForm = () => {
                setCurrentItem({});
            }

            // save an item to DB
            const saveItem = () => {
            if (!currentItem.title) {
              return;
            }
            fetch("/api/v1/add/", {
              method: "POST",
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(currentItem)
            })
            .then(res => res.json())
            .then((data) => {
                // if item has no _id, it wasn't previously saved in DB
                if (!currentItem._id) {
                    currentItem._id = data._id;
                    setCurrentItem(currentItem);
                    // update items list
                    let newItems = [...items];
                    newItems.push(currentItem);
                    setItems(newItems);
                }
            })
        }

            const deleteItem = () => {
                let id = currentItem._id;
                // delete item from DB
                 fetch(`/api/v1/delete/${id}`)
                .then(res => res.json())
                .then((data) => {
                // remove item from UI list
                  const newItems = items.filter((item) => {
                    return item._id !== id;
                  });
              setItems(newItems);
              // clear form
              setCurrentItem({})
            });
        }

            // update list state
            const handleChange = (event) => {
                let newItem = { ...currentItem } ;
                newItem[event.target.name] = event.target.value;
            // update currentItem state
                 setCurrentItem(newItem);
            // update list state
            items.find((item, index) => {
                if (item._id == newItem._id) {
                items[index] = newItem;
            setItems(items);
            }
          })
        }

            return <div>
                <div className="inventory_container">
                <h1>Hello, IT122!</h1>
                <h2>Movie inventory</h2>
                <h4><b>Click on a movie title to learn more details!</b></h4>
                </div>
                <h3><i>< Movies data={items} clickHandler={selectItem}/></i></h3>
                <hr />
                < MovieDetail item={currentItem}
                handleChange={handleChange}
                clearForm={clearForm}
                saveItem={saveItem}
                deleteItem={deleteItem}
                />
            </div>;
            
        }

        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(< App />);



    </script>

  
</body>
</html>